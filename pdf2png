#!/usr/bin/env python

import argparse
import subprocess
import sys
import os
import shutil
import tempfile
import glob
import re

#FIXME: store images of pdf in (a directory of) the current directory

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            description='Generate PNG images in current directory from a PDF.')

    parser.add_argument('pdf', help='pdf file to convert')
    parser.add_argument('pages', nargs='*', 
            help='pages to generate (eg: 1, 1-3, 3-1)')
    parser.add_argument('-d', '--density', dest='density', type=int, 
            default=-1, help='density of the image to generate (eg: 300)')

    args = parser.parse_args()

    if not os.path.exists(args.pdf):
        print '%s: No such pdf file' % args.pdf
        sys.exit(1)

    pages = []

    if args.pages:
        re_range = re.compile(r'(\d+)-(\d+)')
        re_int = re.compile(r'(\d+)')

        for p in args.pages:
            m_range = re_range.match(p)
            if m_range:
                p1 = int(m_range.group(1))
                p2 = int(m_range.group(2))
                if p1 > p2:
                    pages += range(p1, p2 - 1, -1)
                else:
                    pages += range(p1, p2 + 1)
            elif re_int.match(p):
                pages.append(int(p))
            else:
                print '%s: invalid page' % p
                sys.exit(1)

    tmp_dir = tempfile.mkdtemp()
    convert_argv = ['convert']
    
    if args.density > 0:
        convert_argv += ['-density', str(args.density)]

    convert_argv += [args.pdf, '%s/s.png' % tmp_dir] # 's': an arbitrary prefix
    subprocess.Popen(convert_argv, stderr=subprocess.PIPE).communicate()
    
    if pages == []: # generate all pages
        pages = range(len(glob.glob(tmp_dir + '/*.png')))
    else:
        # convert to 0-basis page numbers
        pages = [p - 1 for p in pages]

        for p in pages:
            if not os.path.exists('%s/s-%d.png' % (tmp_dir, p)):
                print '%d: invalid page' % p
                sys.exit(1)

    idx = 0
    for p in pages:
        shutil.copy('%s/s-%d.png' % (tmp_dir, p), '%03d.png' % idx)
        idx += 1

    shutil.rmtree(tmp_dir)

