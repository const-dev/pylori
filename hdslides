#!/usr/bin/env python

from __future__ import division
import argparse
import subprocess
import sys
import os
import shutil
import tempfile
import glob
import re
import fileinput

# ImageMagick command-line tools
CONVERT = 'convert'
IDENTIFY = 'identify'
COMPARE = 'compare'

GHOSTSCRIPT = 'gs'


CMP_IMG_WIDTH = 150
RMSE_THRESHOLD = 5000

DEFAULT_IMG_WIDTH = 840   # good for 15-inch laptop
DEFAULT_DENSITY = 72


def pdf_info(pdf, tmp_dir):
    argv = [GHOSTSCRIPT, '-q', '-dNODISPLAY', '-c', 
            '(%s) (r) file runpdfbegin pdfpagecount = quit' % pdf]
    p = subprocess.Popen(argv, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE).communicate()
    n_pages = int(p[0])

    # generate a single image using default density for reference
    tmp_img = '%s/tmp.png' % tmp_dir
    argv = [GHOSTSCRIPT, '-dSAFER', '-dBATCH', '-dNOPAUSE', 
            '-dFirstPage=1', '-dLastPage=1', '-sDEVICE=png16m', 
            '-sOutputFile=%s' % tmp_img, pdf]
    p = subprocess.Popen(argv, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE).communicate()

    w, h = img_get_size(tmp_img)

    return n_pages, w, h


def img_get_size(img):
    argv = [IDENTIFY, '-format', '%w %h', img]
    p = subprocess.Popen(argv, stdout=subprocess.PIPE).communicate()

    return map(int, p[0].split())


def img_resize(img, w, h, img_out):
    subprocess.call([CONVERT, img, '-resize', '%dx%d' % (w, h),
                     '-background', 'white', '-flatten', img_out])


# NOTE: stdout is redirected (fileinput.input: inplace=1) in img_compare
def img_compare(img1, img2, sim_img):
    argv = [COMPARE, '-metric', 'RMSE', img1, img2, sim_img]
    p = subprocess.Popen(argv, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE).communicate()

    if p[1].find('image widths or heights differ') >= 0:
        w1, h1 = img_get_size(img1)
        w2, h2 = img_get_size(img2)

        if w1 < w2 or h1 < h2:
            img1, img2 = img2, img1

        argv = [COMPARE, '-metric', 'RMSE', '-subimage-search',
                img1, img2, sim_img]
        p = subprocess.Popen(argv, stdout=subprocess.PIPE,
                stderr=subprocess.PIPE).communicate()

    if p[1].find('images too dissimilar') >= 0:
        return 1e12

    return float(p[1].split(None, 1)[0])


def match_img(tmp_dir, lec_dir, n_pages):
    # use the first image as reference
    img_w, img_h = img_get_size('%s/s-0.png' % tmp_dir)

    cmp_w = CMP_IMG_WIDTH
    cmp_h = int(round(CMP_IMG_WIDTH * img_h / img_w))

    for i in range(n_pages):
        img_resize('%s/s-%d.png' % (tmp_dir, i), cmp_w, cmp_h,
                '%s/r-%d.png' % (tmp_dir, i))

    match = []
    first = True

    shutil.copy('%s/sync.txt' % lec_dir, '%s/sync.txt~' % lec_dir)

    for line in fileinput.input('%s/sync.txt' % lec_dir, inplace=1):
        if first:
            first = False   # skip the first line (video name)
            sys.stdout.write(line)
            continue

        orig_name = line.split()[1]
        orig_img = '%s/%s' % (lec_dir, orig_name)
        cmp_name = '%s/cmp.png' % tmp_dir
        img_resize(orig_img, cmp_w, cmp_h, cmp_name)

        diffs = [img_compare(cmp_name, '%s/r-%d.png' % (tmp_dir, i), 
                             '%s/sim.png' % tmp_dir) for i in range(n_pages)]

        min_diff = min(diffs)
        
        if min_diff > RMSE_THRESHOLD:
            sys.stderr.write('NOTE: %s might not match any page of the PDF.\n'\
                             % orig_img)

        match_idx = diffs.index(min_diff)
        new_name = orig_name[:orig_name.rindex('.')] + '.png'

        shutil.copy('%s/s-%d.png' % (tmp_dir, match_idx), 
                    '%s/%s' % (lec_dir, new_name))

        match.append(str(match_idx + 1))
        sys.stderr.write('page %-3d -> %s\n' % (match_idx + 1, new_name))
        print '%s %s' % (line.split()[0], new_name)

    print ' '.join(match)


def copy_img(tmp_dir, lec_dir, pages, n_pages):
    if pages == []: # generate all pages
        pages = range(n_pages)
    else:
        # convert to zero-based page numbers
        pages = [p - 1 for p in pages]

        for p in pages:
            if not os.path.exists('%s/s-%d.png' % (tmp_dir, p)):
                print '%d: invalid page' % p
                return

    idx = 0
    for p in pages:
        shutil.copy('%s/s-%d.png' % (tmp_dir, p),
                    '%s/%03d.png' % (lec_dir, idx))
        idx += 1

    sync_file = '%s/sync.txt' % lec_dir

    with open(sync_file, 'r') as f:
        n_slides = f.read().count('\n') - 1

    if n_slides != len(pages):
        print 'number of specified pages not equal to number of slides.'
        print 'leave "sync.txt" untouched.'
        return

    idx = 0
    first = True
    for line in fileinput.input(sync_file, inplace=1):
        if first:
            first = False   # skip the first line (video name)
            sys.stdout.write(line)
            continue

        print '%s %03d.png' % (line.split()[0], idx)
        idx += 1


def pdf2png():
    parser = argparse.ArgumentParser(
            description='Generate PNG images from a PDF.')

    parser.add_argument('dir', help='lecture directory')

    parser.add_argument('pages', nargs='*', 
            help='pages to generate (eg: 1, 1-3, 3-1)')

    parser.add_argument('-w', '--width', dest='width', type=int, 
            default=DEFAULT_IMG_WIDTH, 
            help='width of the image to generate (default: %d)' % \
                  DEFAULT_IMG_WIDTH)

    parser.add_argument('-m', '--match', action='store_true',
            dest='auto_match', default=False,
            help='auto match PDF with slide images')

    args = parser.parse_args()

    lec_dir = args.dir.rstrip('/')

    if not os.path.exists(lec_dir):
        print '%s: No such directory' % lec_dir
        sys.exit(1)

    with open('%s/info.txt' % lec_dir, 'r') as f:
        url = f.readline()
        pdf_name = f.readline().rstrip()

    if pdf_name == '-':
        print 'No pdf found.'
        sys.exit(1)

    pdf_file = '%s/%s' % (lec_dir, pdf_name)
    if not os.path.exists(pdf_file):
        print '%s: No such file' % pdf_file
        sys.exit(1)

    if args.auto_match and args.pages:
        print 'Auto match is on. Specified pages are ignored.'

    pages = []

    if not args.auto_match and args.pages:
        re_range = re.compile(r'(\d+)-(\d+)')
        re_int = re.compile(r'(\d+)')

        for p in args.pages:
            m_range = re_range.match(p)
            if m_range:
                p1 = int(m_range.group(1))
                p2 = int(m_range.group(2))
                if p1 > p2:
                    pages += range(p1, p2 - 1, -1)
                else:
                    pages += range(p1, p2 + 1)
            elif re_int.match(p):
                pages.append(int(p))
            else:
                print '%s: invalid page' % p
                sys.exit(1)

    tmp_dir = tempfile.mkdtemp()

    n_pages, pdf_w, pdf_h = pdf_info(pdf_file, tmp_dir)

    density = DEFAULT_DENSITY * args.width / pdf_w

    argv = ['convert', '-density', str(density), pdf_file, 
            '%s/s.png' % tmp_dir]

    subprocess.Popen(argv, stdout=subprocess.PIPE, 
            stderr=subprocess.PIPE).communicate()

    if args.auto_match:
        match_img(tmp_dir, lec_dir, n_pages)
    else:
        copy_img(tmp_dir, lec_dir, pages, n_pages)

    shutil.rmtree(tmp_dir)


if __name__ == '__main__':
    pdf2png()
