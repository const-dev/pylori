#!/usr/bin/env python

import argparse
import os
import re
import subprocess
import sys
import urllib2

# TODO: parse slides titles
# make sure mplayer is in the path

def videolecture_download():
    parser = argparse.ArgumentParser(
            description='Download lectures from videolectures.net')

    parser.add_argument('url', help='http://videolectures.net/XXX/[video/NNN/]')

    parser.add_argument('-v', '--skip_video', action='store_true',
            dest='skip_video', default=False,
            help='download only slides, but no video')

    args = parser.parse_args()

    url = args.url

    html = urllib2.urlopen(url).read()

    match = re.search(r'"(mms://.*?)"', html)
    if match:
        mms = match.group(1)
    else:
        raise Exception("Parsing error: failed to find mms")

    #print 'Media URL: %s' % mms

    m = re.search(r'<meta name="title" content="(.*?)" />', html)
    title = m.group(1).rstrip()

    m = re.search(r'http://videolectures.net/([^/]*)', url)
    video_name = m.group(1)

    m = re.search(r'http://videolectures.net/(.*?)/video/(.*)', url.rstrip('/'))
    if m:
        section = m.group(2)
        video_name += '_' + section
        title += '-' + section

    #print 'Filename: %s' % video_name
    
    if not os.path.isdir(title):
        os.mkdir(title, 0755)
        print 'Lecture directory created: "%s"' % title
    else:
        print 'Lecture directory "%s" exists.' % title

    m = re.search(r'Download slides:\s*<a href="(.*?)"', html)
    slide_name = '-'
    if m:
        s_url = m.group(1)
        slide_name = s_url.split('/')[-1]
        if s_url.startswith('/'):
            s_url = 'http://videolectures.net' + s_url
        s_content = urllib2.urlopen(s_url)
        s_file = open('%s/%s' % (title, slide_name), 'wb')
        s_file.write(s_content.read())
        s_file.close()

    slides = {}
    for m in re.findall(r'idx:\s*(\d+), src:\s*"(.*?)"', html):
        slides[m[0]] = m[1]
    
    slides_time = {}
    for m in re.findall('sync=sync.next={time: (\d+).*idx: (\d+)', html):
        if m[1] in slides:
            slides_time[int(m[0])] = slides[m[1]]

    f = open(title + '/sync.txt', 'w')

    f.write('%s\n' % video_name)

    idx = 0
    for t in sorted(slides_time.keys()):
        img_url = slides_time[t]
        img_ext = img_url.split('.')[-1]
        img = urllib2.urlopen(img_url)
        img_name = '%03d.%s' % (idx, img_ext)
        img_file = open('%s/%s' % (title, img_name), 'wb')
        img_file.write(img.read())
        img_file.close()

        f.write('%s %s\n' % (t, img_name))
        idx += 1

    f.close()

    f = open(title + '/info.txt', 'w')
    f.write('%s\n' % url)
    f.write('%s\n' % slide_name)
    f.close()

    if args.skip_video:
        sys.exit(0)

    video_file = '%s/%s' % (title, video_name)
    argv = ['mplayer', '-dumpstream', mms, '-dumpfile', video_file]
    ret = subprocess.call(argv)

    if ret == 0:
        print 'Video downloaded successfully'
    else:
        print 'Download failed. Mplayer return code: %d' % ret


if __name__ == '__main__':
    videolecture_download()
