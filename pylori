#!/usr/bin/env python

from __future__ import division
import wx
from wx.lib.pubsub import Publisher as pub
import sys
import os
import threading
import subprocess
import re

# TODO: 
#  * redirect keyboard event on wx to mplayer (popen)
#  * more error handling (eg: invalid sync.txt format)
#
# FIXME: figure out how to handle close event


MPLAYER = 'mplayer'

# How come the following messges keep showing when using wx.lib.pubsub?
# "__NSCFString autoreleased with no pool in place - just leaking"
# So I use event instead..
MSG_PASS_BY_EVENT = True

# for widescreen, in case of failure to detect video aspect
DEFAULT_VIDEO_ASPECT = 1.76   

SET_MPLAYER_ASPECT = False


class SlidesWindow(wx.Window):
    def __init__(self, parent):
        wx.Window.__init__(self, parent)
        self.img = None
        self.parent = parent


    def OnSize(self, evt):
        self.resize(evt.GetSize())


    def OnPaint(self, evt):
        dc = wx.BufferedPaintDC(self, self.buffer)


    def init_buffer(self):
        w, h = self.GetClientSize()        

        self.buffer = wx.EmptyBitmap(w, h)
        dc = wx.BufferedDC(wx.ClientDC(self), self.buffer)
        self.show_slide(dc)
        

    def set_slide(self, img_file):
        self.img = wx.Image(img_file, wx.BITMAP_TYPE_ANY)

        dc = wx.BufferedDC(wx.ClientDC(self), self.buffer)
        self.show_slide(dc)


    def resize(self, win_size):
        win_w, win_h = win_size

        if win_w > win_h * self.ratio:
            win_h = win_w / self.ratio
        else:
            win_w = win_h * self.ratio

        self.parent.SetSize(wx.Size(win_w, win_h))
        self.init_buffer()

    
    def show_slide(self, dc):
        dc.Clear()
        dw, dh = dc.GetSize()

        iw, ih = self.img.GetWidth(), self.img.GetHeight()
        self.ratio = iw / ih

        scale = min(dw / iw, dh / ih)
        scaled_img = self.img.Scale(scale * iw, scale * ih, 
                wx.IMAGE_QUALITY_HIGH)
        dc.DrawBitmap(wx.BitmapFromImage(scaled_img), 0, 0)


    def init_geometry(self, img_file):
        disp_w, disp_h = wx.GetDisplaySize()

        img = wx.Image(img_file, wx.BITMAP_TYPE_ANY)
        img_w, img_h = img.GetWidth(), img.GetHeight()
        # place two windows side by side horizontally 
        scale = min(disp_w / 2 / img_w, disp_h / img_h)

        img_w *= scale
        img_h *= scale

        #self.parent.SetPosition((disp_w - img_w, 0))
        self.parent.SetPosition((disp_w - img_w, (disp_h - img_h) / 2))

        #self.parent.SetSize(wx.Size(img_w, disp_h))
        self.parent.SetSize(wx.Size(img_w, img_h))

        self.ratio = img_w / img_h
        self.img = img
        self.resize((img_w, img_h))
        
        self.Bind(wx.EVT_SIZE, self.OnSize)
        self.Bind(wx.EVT_PAINT, self.OnPaint)

        self.parent.Show()


UPDATE_ID = wx.NewId()
INIT_GEO_ID = wx.NewId()

class UpdateEvent(wx.PyEvent):
    def __init__(self, img):
        wx.PyEvent.__init__(self)
        self.SetEventType(UPDATE_ID)
        self.data = img


class InitGeoEvent(wx.PyEvent):
    def __init__(self, img):
        wx.PyEvent.__init__(self)
        self.SetEventType(INIT_GEO_ID)
        self.data = img


class SlidesFrame(wx.Frame):
    def __init__(self):
        wx.Frame.__init__(self, None, 
                style=(wx.DEFAULT_FRAME_STYLE | wx.STAY_ON_TOP))
        self.plot = SlidesWindow(self)

        if MSG_PASS_BY_EVENT:
            self.Connect(-1, -1, UPDATE_ID, self.change_slides)
            self.Connect(-1, -1, INIT_GEO_ID, self.init_slides)
        else:
            pub.subscribe(self.change_slides, 'change_slides')
            pub.subscribe(self.init_slides, 'init_slides')

    def init_slides(self, msg):
        self.plot.init_geometry(msg.data)

    def change_slides(self, msg):
        self.plot.set_slide(msg.data)


def load_lecture():
    slides = []

    with open(slides_sync_file, 'r') as f:
        video = f.readline().rstrip()

        for line in f:
            m = re.search(r'(\d+) (\S+)', line)
            slides.append((int(m.group(1)), m.group(2)))

    return video, slides


def cur_slide(msec, slides_sync, offset=3000):
    slide = slides_sync[0][1]

    for t, s in slides_sync:
        if msec < t + offset:
            break
        slide = s

    return slide


def get_video_aspect(video):
    args = [MPLAYER, '-vo', 'null', '-ao', 'null', '-frames', '0',
            '-identify', video]
    p = subprocess.Popen(args, stdout=subprocess.PIPE,
            stderr=subprocess.PIPE).communicate()

    aspect = DEFAULT_VIDEO_ASPECT
    m = re.search(r'ID_VIDEO_ASPECT=([\d.]+)', p[0])
    if m:
        aspect = float(m.group(1))

    return aspect


class SyncSlides(threading.Thread):
    def __init__(self, slides_viewer, disp_w, disp_h):
        threading.Thread.__init__(self)
        self.slides_viewer = slides_viewer 
        self.disp_w = disp_w
        self.disp_h = disp_h
        self.start()

    def run(self):
        video, slides_sync = load_lecture()

        video_file = '%s/%s' % (slides_dir, video)

        video_aspect = get_video_aspect(video_file)

        geo_w = int(self.disp_w) // 2

        if sys.platform == 'darwin' and not SET_MPLAYER_ASPECT:
            geo_h = int(self.disp_h)
            geo_y = 0
        else:
            geo_h = int(round(geo_w / video_aspect))
            geo_y = (self.disp_h - geo_h) // 2

        args = [MPLAYER, '-af', 'scaletempo', #'-ontop',
                '-geometry', '%dx%d+0+%d' % (geo_w, geo_h, geo_y), video_file]

        #print ' '.join(args)

        p = subprocess.Popen(args, stdin=None,
                stdout=subprocess.PIPE, stderr=subprocess.STDOUT, 
                universal_newlines=True)

        prev_slide = slides_sync[0][1]
        img_file = slides_dir + '/' + prev_slide

        if MSG_PASS_BY_EVENT:
            wx.PostEvent(self.slides_viewer, InitGeoEvent(img_file))
        else:
            pub.sendMessage('init_slides', img_file)

        while True:
            line = p.stdout.readline()
            if not line:
                print
                # quit slides viewer
                self.slides_viewer.Close()
                break
            m = re.search(r'A:\s*([\d.]+)', line)
            if m:
                sys.stdout.write(line.rstrip() + '\r')
                msec = float(m.group(1)) * 1000
                slide = cur_slide(msec, slides_sync)

                if slide != prev_slide:
                    img_file = slides_dir + '/' + slide

                    if MSG_PASS_BY_EVENT:
                        wx.PostEvent(self.slides_viewer, UpdateEvent(img_file))
                    else:
                        pub.sendMessage('change_slides', img_file)

                    prev_slide = slide


if __name__ == '__main__':
    if len(sys.argv) != 2:
        print 'usage: %s lecture_directory' % sys.argv[0]
        sys.exit(1)

    slides_dir = sys.argv[1].rstrip('/')

    if not os.path.exists(slides_dir):
        print '%s: No such directory' % slides_dir
        sys.exit(1)

    slides_sync_file = slides_dir + '/sync.txt'
    if not os.path.exists(slides_sync_file):
        print 'No video information sync.txt in %s' % slides_dir
        sys.exit(1)

    app = wx.App()

    frm = SlidesFrame()

    disp_w, disp_h = wx.GetDisplaySize()
    SyncSlides(frm, disp_w, disp_h)

    app.MainLoop()
